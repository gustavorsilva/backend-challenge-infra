name: Terraform Workflow

on:
  push:
    branches: [ feature/* ]
    tags:
      - 'destroy-*'   # Executa destroy quando uma tag que começa com 'destroy-' é criada
  pull_request:
  workflow_dispatch:    # Permite execução manual

jobs:
  terraform:
    name: Terraform Init, Plan, Apply e Destroy
    runs-on: ubuntu-latest

    steps:
      # Passo 1: Checkout do código
      - name: Checkout repository
        uses: actions/checkout@v3

      # Passo 2: Configurar o Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0  # Substitua pela versão desejada

      # Passo 3: Inicializar o Terraform
      - name: Terraform Init
        run: terraform init

      # Passo 4: Validar a configuração do Terraform
      - name: Terraform Validate
        run: terraform validate

      # Passo 5: Executar o Terraform Plan
      - name: Terraform Plan
        id: plan
        run: terraform plan -out=tfplan

      # Passo 6: Mostrar o plano
      - name: Show Terraform Plan
        if: always()
        run: terraform show -no-color tfplan

      # Passo 7: Aplicar as mudanças
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve tfplan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Passo 8: Destruir a infraestrutura
      - name: Terraform Destroy
        if: startsWith(github.ref, 'refs/tags/destroy-') || github.event_name == 'workflow_dispatch'
        run: terraform destroy -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}